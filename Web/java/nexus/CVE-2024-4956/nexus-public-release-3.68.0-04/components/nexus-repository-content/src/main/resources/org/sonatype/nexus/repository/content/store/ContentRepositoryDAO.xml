<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Sonatype Nexus (TM) Open Source Version
    Copyright (c) 2008-present Sonatype, Inc.
    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.

    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.

    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
    Eclipse Foundation. All other trademarks are the property of their respective owners.

-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${namespace}">

  <insert id="createSchema">
    --
    -- each format has a content repository table which they can extend
    --
    CREATE TABLE IF NOT EXISTS ${format}_content_repository (
      repository_id        INT GENERATED BY DEFAULT AS IDENTITY,
      config_repository_id ${UUID_TYPE} NOT NULL,
      attributes           ${JSON_TYPE} NOT NULL,
      created              TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
      last_updated         TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,

      CONSTRAINT pk_${format}_content_repository_id PRIMARY KEY (repository_id),
      CONSTRAINT uk_${format}_config_repository_id UNIQUE (config_repository_id)
    );
    --
  </insert>

  <sql id="repositoryMatch">
    <choose>
      <when test="repositoryId != null">
        repository_id = #{repositoryId}
      </when>
      <otherwise>
        config_repository_id = #{configRepositoryId}
      </otherwise>
    </choose>
  </sql>

  <select id="browseContentRepositories" resultType="ContentRepositoryData">
    SELECT * FROM ${format}_content_repository ORDER BY repository_id;
  </select>

  <insert id="createContentRepository" useGeneratedKeys="true" keyProperty="repositoryId" parameterType="ContentRepositoryData">
    INSERT INTO ${format}_content_repository (config_repository_id, attributes) VALUES (#{configRepositoryId}, #{attributes});
  </insert>

  <select id="readContentRepository" resultType="ContentRepositoryData">
    SELECT * FROM ${format}_content_repository WHERE config_repository_id = #{configRepositoryId};
  </select>

  <select id="readContentRepositoryAttributes" resultType="NestedAttributesMap">
    SELECT attributes FROM ${format}_content_repository WHERE <include refid="repositoryMatch"/>;
  </select>

  <update id="updateContentRepositoryAttributes" parameterType="ContentRepositoryData">
    UPDATE ${format}_content_repository SET attributes = #{attributes}, last_updated = CURRENT_TIMESTAMP
        WHERE <include refid="repositoryMatch"/> AND attributes != #{attributes};
  </update>

  <delete id="deleteContentRepository" parameterType="ContentRepositoryData">
    DELETE FROM ${format}_content_repository WHERE <include refid="repositoryMatch"/>;
  </delete>

  <select id="readAllContentRepositoryIds" resultType="java.util.HashMap" databaseId="PostgreSQL">
    <foreach item="repositoryFormat" index="index" collection="repositoryFormats" separator=" UNION ">
      SELECT r.name, cr.repository_id FROM repository r
      INNER JOIN ${repositoryFormat}_content_repository cr ON r.id = cr.config_repository_id
    </foreach>
  </select>

  <select id="readContentRepositoryId" resultType="java.util.HashMap" databaseId="PostgreSQL">
      SELECT r.name, cr.repository_id FROM repository r
      INNER JOIN ${repositoryFormat}_content_repository cr ON r.id = cr.config_repository_id
      WHERE r.name = '${repositoryName}'
  </select>

</mapper>
