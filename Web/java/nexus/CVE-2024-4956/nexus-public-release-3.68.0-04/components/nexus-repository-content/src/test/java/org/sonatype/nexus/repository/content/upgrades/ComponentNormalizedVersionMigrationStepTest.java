/*
 * Sonatype Nexus (TM) Open Source Version
 * Copyright (c) 2008-present Sonatype, Inc.
 * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
 *
 * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
 * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
 *
 * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
 * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
 * Eclipse Foundation. All other trademarks are the property of their respective owners.
 */
package org.sonatype.nexus.repository.content.upgrades;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Arrays;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

import org.sonatype.goodies.testsupport.TestSupport;
import org.sonatype.nexus.datastore.api.DataSession;
import org.sonatype.nexus.repository.Format;
import org.sonatype.nexus.repository.content.kv.global.GlobalKeyValueStore;
import org.sonatype.nexus.repository.content.kv.global.NexusKeyValue;
import org.sonatype.nexus.repository.content.kv.global.ValueType;
import org.sonatype.nexus.repository.content.store.ComponentDAO;
import org.sonatype.nexus.repository.content.tasks.normalize.NormalizeComponentVersionTask;
import org.sonatype.nexus.repository.content.tasks.normalize.NormalizeComponentVersionTaskDescriptor;
import org.sonatype.nexus.scheduling.PostStartupTaskScheduler;
import org.sonatype.nexus.scheduling.TaskScheduler;
import org.sonatype.nexus.testdb.DataSessionRule;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.mockito.Mock;

import static java.lang.String.format;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.sonatype.nexus.datastore.api.DataStoreManager.DEFAULT_DATASTORE_NAME;
import static org.testcontainers.shaded.org.awaitility.Awaitility.await;

public class ComponentNormalizedVersionMigrationStepTest
    extends TestSupport
{
  private final String CREATE_COMPONENT_TABLE = "CREATE TABLE IF NOT EXISTS {format}_component (" +
      "component_id INT GENERATED BY DEFAULT AS IDENTITY" +
      ");";

  @Rule
  public DataSessionRule sessionRule = new DataSessionRule(DEFAULT_DATASTORE_NAME)
      .access(ComponentDAO.class);

  @Mock
  private PostStartupTaskScheduler postStartupTaskScheduler;

  @Mock
  private GlobalKeyValueStore globalKeyValueStore;

  @Mock
  private TaskScheduler scheduler;

  private DataSession<?> session;

  private ComponentNormalizedVersionMigrationStep migrationStep;

  @Before
  public void setUp() {
    Format first = mock(Format.class);
    Format second = mock(Format.class);

    when(first.getValue()).thenReturn("maven2");
    when(second.getValue()).thenReturn("nuget");

    migrationStep =
        new ComponentNormalizedVersionMigrationStep(Arrays.asList(first, second), globalKeyValueStore, scheduler,
            postStartupTaskScheduler);

    session = sessionRule.openSession(DEFAULT_DATASTORE_NAME);
  }

  @After
  public void cleanup() {
    session.close();
  }

  @Test
  public void testChecksumChangesIfFormatsAreNotNormalized() {
    NexusKeyValue kv1 =
        new NexusKeyValue(format(NormalizeComponentVersionTask.KEY_FORMAT, "maven2"), ValueType.BOOLEAN, true);
    NexusKeyValue kv2 =
        new NexusKeyValue(format(NormalizeComponentVersionTask.KEY_FORMAT, "nuget"), ValueType.BOOLEAN, false);

    when(globalKeyValueStore.getKey(kv1.key())).thenReturn(Optional.of(kv1));
    when(globalKeyValueStore.getKey(kv2.key())).thenReturn(Optional.of(kv2));

    int checksum1 = migrationStep.getChecksum();

    await().atMost(5, TimeUnit.SECONDS)
        .untilAsserted(() -> {
          int checksum2 = migrationStep.getChecksum();
          assertNotEquals(checksum1, checksum2);
        });
  }

  @Test
  public void testChecksumMaintainsIfFormatsAreNormalized() {
    NexusKeyValue kv1 =
        new NexusKeyValue(format(NormalizeComponentVersionTask.KEY_FORMAT, "maven2"), ValueType.BOOLEAN, true);
    NexusKeyValue kv2 =
        new NexusKeyValue(format(NormalizeComponentVersionTask.KEY_FORMAT, "nuget"), ValueType.BOOLEAN, true);

    when(globalKeyValueStore.getKey(kv1.key())).thenReturn(Optional.of(kv1));
    when(globalKeyValueStore.getKey(kv2.key())).thenReturn(Optional.of(kv2));

    int checksum1 = migrationStep.getChecksum();
    int checksum2 = migrationStep.getChecksum();

    assertEquals(1, checksum1);
    assertEquals(checksum1, checksum2);
  }

  @Test
  public void testFormatsAreAltered() throws Exception {
    createTable("maven2");
    createTable("nuget");
    try (Connection connection = sessionRule.openConnection(DEFAULT_DATASTORE_NAME)) {
      migrationStep.migrate(connection);
      assertTrue(columnExists(connection, "maven2", "normalized_version"));
      assertTrue(columnExists(connection, "nuget", "normalized_version"));
    }
  }

  @Test
  public void testTaskIsScheduled() throws Exception {
    try (Connection connection = sessionRule.openConnection(DEFAULT_DATASTORE_NAME)) {
      migrationStep.migrate(connection);
      verify(scheduler).createTaskConfigurationInstance(eq(NormalizeComponentVersionTaskDescriptor.TYPE_ID));
      verify(postStartupTaskScheduler).schedule(any());
    }
  }

  private void createTable(final String format) throws Exception {
    try (Connection connection = sessionRule.openConnection(DEFAULT_DATASTORE_NAME)) {
      PreparedStatement ps = connection.prepareStatement(CREATE_COMPONENT_TABLE.replaceAll("\\{format\\}", format));
      ps.execute();
    }
  }

  private boolean columnExists(Connection conn, String format, String columnName) throws Exception {
    String sql = "SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE UPPER(TABLE_NAME) = ? AND UPPER(COLUMN_NAME) = ?";
    try (PreparedStatement statement = conn.prepareStatement(sql)) {
      statement.setString(1, format("%s_component", format).toUpperCase());
      statement.setString(2, columnName.toUpperCase());
      try (ResultSet results = statement.executeQuery()) {
        return results.next();
      }
    }
  }
}
