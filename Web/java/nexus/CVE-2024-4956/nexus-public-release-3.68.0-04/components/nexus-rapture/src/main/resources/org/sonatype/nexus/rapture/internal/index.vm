#*
 * Sonatype Nexus (TM) Open Source Version
 * Copyright (c) 2008-present Sonatype, Inc.
 * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
 *
 * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
 * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
 *
 * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
 * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
 * Eclipse Foundation. All other trademarks are the property of their respective owners.
 *###
#set($raptureUrl="$relativePath/static/rapture")

<!DOCTYPE html>
<html lang="en">
<head>
  <title>Sonatype Nexus Repository</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <meta name="description" content="Sonatype Nexus Repository"/>
  <meta http-equiv="X-UA-Compatible" content="IE=edge"/>

#* START favicon links and meta
 * favicon set for multiple browsers, OS shortcuts, etc.
 * Generated at Real Favicon Generator, https://realfavicongenerator.net/
 *
 * Associated files not referenced explicitly in link or meta tags:
 *    mstile-*.png      - Win8+ desktop support
 *    browserconfig.xml - Win8+ desktop support
 *    apple-touch-icon.png  - OSX Safari desktop support
*#
## Safari on MacOS and iOS
  <link rel="icon" type="image/png" href="$raptureUrl/resources/safari-favicon-32x32.png?$urlSuffix" sizes="32x32">
  <link rel="mask-icon" href="$raptureUrl/resources/favicon-white.svg?$urlSuffix" color="#00bb6c">
## classic favicon, shown in browser tabs
  <link rel="icon" type="image/png" href="$raptureUrl/resources/favicon.svg?$urlSuffix" sizes="16x16">
## END favicon links

  
  #macro(style $src)
    <link rel="stylesheet" type="text/css" href="$src?$urlSuffix">
  #end

  ## Load all styles
  #foreach($uri in $styles)
    #style("$uri")
  #end

  ## Loading progress helpers
  <script type="text/javascript">
    function log(msg) {
      if (console && console.log) {
        console.log(msg);
      }
    }
    function progressMessage(msg) {
      log(msg);
      document.getElementById('loading-msg').innerHTML=msg;
    }
  </script>
  #if ( $analyticsEnabled )
    <script type="text/javascript">
      function servicePath(service) {
        return window.location.origin + window.location.pathname + service;
      }

      (function () {
        const telemetryService = servicePath('service/rest/v1/user-telemetry/javascript');
        log('Creating wrapper script');
        const scriptElement = document.createElement('script');
        scriptElement.type = 'text/javascript';
        scriptElement.src = telemetryService;
        scriptElement.async = true;
        scriptElement.style.display = 'none';
        scriptElement.onload = () => initializeTelemetry();
        document.head.appendChild(scriptElement);
      })();

      async function getTelemetryConfig() {
        try {
          const telemetryService = 'service/rest/v1/user-telemetry/config';
          const response = await fetch(servicePath(telemetryService));
          return await response.json();
        } catch (error) {
          console.error('Error fetching telemetry config:', error);
        }
      }

      async function initializeTelemetry() {
        if (window.userTelemetry) {
          log('Initializing telemetry');
          const telemetryService = 'service/rest/v1/user-telemetry/events';
          let config = await getTelemetryConfig();
          config.contentHost = servicePath(telemetryService);
          config.dataHost = config.contentHost;
          config.sanitizeUrl = sanitizeUrl;
          config.filterUrls = ['*/#admin*'];
          config.usePOST = true;
          window.userTelemetry.initialize(config);
          if (typeof window.initializeTelemetry != 'function') {
            window.initializeTelemetry = initializeTelemetry;
          }
        }
        else {
          log('Could not initialize telemetry');
        }
      }

      function sanitizeUrl(url) {
        try {
          const urlObject = new URL(url);
          return `${urlObject.pathname}${urlObject.hash}`;
        } catch (error) {
          log("Invalid URL");
          return '';
        }
      }

    </script>
  #end
  #macro(message $text)
    <script type="text/javascript">progressMessage('$text');</script>
  #end
</head>
<body class="x-border-box">

<div id="loading-mask"></div>
<div id="loading">
  <div id="loading-background">
    <img id="loading-logo" src="$raptureUrl/resources/images/sonatype-repository-logo-reverse.svg?$urlSuffix" alt="Product Logo" width='650' />
    <div class="loading-indicator">
      <img id="loading-spinner" src="$raptureUrl/resources/images/loading-spinner.gif?$urlSuffix" alt="Loading Spinner"/>
      <span id="loading-msg">Loading ...</span>
    </div>
  </div>

  ## Code loading
  <div id="code-load" class="x-hide-display">
    #macro(script $src)
      <script type="text/javascript" src="$src?$urlSuffix"></script>
    #end

    ## Load all scripts
    #foreach($uri in $scripts)
      #message("Loading ${util.fileName($uri)}")
      #script("$uri")
    #end

    ## Finished
    #message("Initializing ...")
  </div>
</div>

## Fields required for history management
<form id="history-form" class="x-hide-display" tabindex="-1">
  <input type="hidden" id="x-history-field"/>
  <iframe id="x-history-frame" title="Browse history form"></iframe>
</form>

</body>
</html>
