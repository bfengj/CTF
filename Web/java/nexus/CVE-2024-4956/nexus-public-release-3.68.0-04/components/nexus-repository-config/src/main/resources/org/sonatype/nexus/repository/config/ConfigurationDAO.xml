<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Sonatype Nexus (TM) Open Source Version
    Copyright (c) 2008-present Sonatype, Inc.
    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.

    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.

    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
    Eclipse Foundation. All other trademarks are the property of their respective owners.

-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.sonatype.nexus.repository.config.ConfigurationDAO">

  <insert id="createSchema">
    CREATE TABLE IF NOT EXISTS repository (
      id              ${UUID_TYPE} NOT NULL,
      name            VARCHAR(200) NOT NULL,
      recipe_name     VARCHAR(200) NOT NULL,
      online          BOOLEAN      NOT NULL,
      routing_rule_id ${UUID_TYPE} NULL,
      attributes      ${JSON_TYPE} NOT NULL,

      CONSTRAINT pk_repository_id PRIMARY KEY (id),
      CONSTRAINT uk_repository_name UNIQUE (name)
    )
  </insert>

  <select id="browse" resultType="ConfigurationData">
    SELECT * FROM repository;
  </select>

  <insert id="create" parameterType="ConfigurationData">
    INSERT INTO repository (id, name, recipe_name, online, routing_rule_id, attributes)
        VALUES (#{id}, #{name}, #{recipeName}, #{online}, #{routingRuleId}, #{attributes});
  </insert>

  <select id="read" resultType="ConfigurationData">
    SELECT * FROM repository WHERE id = #{value};
  </select>

  <select id="readByName" resultType="ConfigurationData">
    SELECT * FROM repository WHERE name = #{value};
  </select>

  <select id="readByNames" resultType="ConfigurationData">
    SELECT * FROM repository
    <if test="collection != null">
      <foreach item="repositoryName" index="index" collection="collection"
               open="WHERE (" separator=" OR " close=")">
        name LIKE #{repositoryName}
      </foreach>
    </if>
  </select>


  <update id="update" parameterType="ConfigurationData" useGeneratedKeys="true" keyProperty="id">
    UPDATE repository SET
        <!-- recipe_name is not considered updateable -->
        online = #{online}, routing_rule_id = #{routingRuleId}, attributes = #{attributes}
        <!-- can only rename if we have 'id' to find the record -->
        <if test="id != null">, name = #{name}</if>
        <!-- use 'name' to find record when 'id' is not available -->
        WHERE <choose><when test="id != null">id = #{id}</when>
              <otherwise>name = #{name}</otherwise></choose>;
  </update>

  <delete id="delete">
    DELETE FROM repository WHERE id = #{value};
  </delete>

  <delete id="deleteByName">
    DELETE FROM repository WHERE name = #{value};
  </delete>

</mapper>
