<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Sonatype Nexus (TM) Open Source Version
    Copyright (c) 2008-present Sonatype, Inc.
    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.

    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.

    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
    Eclipse Foundation. All other trademarks are the property of their respective owners.

-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.sonatype.nexus.quartz.internal.datastore.QuartzDAO">

  <insert id="createSchema">
    CREATE TABLE IF NOT EXISTS qrtz_job_details
    (
      sched_name VARCHAR(120) NOT NULL,
      job_name  VARCHAR(200) NOT NULL,
      job_group VARCHAR(200) NOT NULL,
      description TEXT NULL,
      job_class_name   VARCHAR(250) NOT NULL,
      is_durable BOOL NOT NULL,
      is_nonconcurrent BOOL NOT NULL,
      is_update_data BOOL NOT NULL,
      requests_recovery BOOL NOT NULL,
      job_data BYTEA NULL,
      CONSTRAINT pk_qrtz_job_details PRIMARY KEY (sched_name, job_name, job_group)
    );

    CREATE TABLE IF NOT EXISTS qrtz_triggers
    (
      sched_name VARCHAR(120) NOT NULL,
      trigger_name VARCHAR(200) NOT NULL,
      trigger_group VARCHAR(200) NOT NULL,
      job_name  VARCHAR(200) NOT NULL,
      job_group VARCHAR(200) NOT NULL,
      description TEXT NULL,
      next_fire_time BIGINT NULL,
      prev_fire_time BIGINT NULL,
      priority INTEGER NULL,
      trigger_state VARCHAR(16) NOT NULL,
      trigger_type VARCHAR(8) NOT NULL,
      start_time BIGINT NOT NULL,
      end_time BIGINT NULL,
      calendar_name VARCHAR(200) NULL,
      misfire_instr SMALLINT NULL,
      job_data BYTEA NULL,
      CONSTRAINT pk_qrtz_triggers PRIMARY KEY (sched_name, trigger_name, trigger_group),
      CONSTRAINT fk_qrtz_triggers_qrtz_job_details FOREIGN KEY (sched_name, job_name, job_group)
        REFERENCES qrtz_job_details (sched_name, job_name, job_group)
    );

    CREATE TABLE IF NOT EXISTS qrtz_simple_triggers
    (
      sched_name VARCHAR(120) NOT NULL,
      trigger_name VARCHAR(200) NOT NULL,
      trigger_group VARCHAR(200) NOT NULL,
      repeat_count BIGINT NOT NULL,
      repeat_interval BIGINT NOT NULL,
      times_triggered BIGINT NOT NULL,
      CONSTRAINT pk_qrtz_simple_triggers PRIMARY KEY (sched_name, trigger_name, trigger_group),
      CONSTRAINT fk_qrtz_simple_triggers_qrtz_triggers FOREIGN KEY (sched_name, trigger_name, trigger_group)
        REFERENCES qrtz_triggers(sched_name, trigger_name, trigger_group)
        ON DELETE CASCADE
    );

    CREATE TABLE IF NOT EXISTS qrtz_cron_triggers
    (
      sched_name VARCHAR(120) NOT NULL,
      trigger_name VARCHAR(200) NOT NULL,
      trigger_group VARCHAR(200) NOT NULL,
      cron_expression VARCHAR(120) NOT NULL,
      time_zone_id VARCHAR(80),
      CONSTRAINT pk_qrtz_cron_triggers PRIMARY KEY (sched_name, trigger_name, trigger_group),
      CONSTRAINT fk_qrtz_cron_triggers_qrtz_triggers FOREIGN KEY (sched_name, trigger_name, trigger_group)
        REFERENCES qrtz_triggers (sched_name, trigger_name, trigger_group)
        ON DELETE CASCADE
    );

    CREATE TABLE IF NOT EXISTS qrtz_simprop_triggers
    (
      sched_name VARCHAR(120) NOT NULL,
      trigger_name VARCHAR(200) NOT NULL,
      trigger_group VARCHAR(200) NOT NULL,
      str_prop_1 VARCHAR(512) NULL,
      str_prop_2 VARCHAR(512) NULL,
      str_prop_3 VARCHAR(512) NULL,
      int_prop_1 INT NULL,
      int_prop_2 INT NULL,
      long_prop_1 BIGINT NULL,
      long_prop_2 BIGINT NULL,
      dec_prop_1 NUMERIC(13,4) NULL,
      dec_prop_2 NUMERIC(13,4) NULL,
      bool_prop_1 BOOL NULL,
      bool_prop_2 BOOL NULL,
      CONSTRAINT pk_qrtz_simprop_triggers PRIMARY KEY (sched_name, trigger_name, trigger_group),
      CONSTRAINT fk_qrtz_simprop_triggers_qrtz_triggers FOREIGN KEY (sched_name, trigger_name, trigger_group)
        REFERENCES qrtz_triggers(sched_name, trigger_name, trigger_group)
        ON DELETE CASCADE
    );

    CREATE TABLE IF NOT EXISTS qrtz_blob_triggers
    (
      sched_name VARCHAR(120) NOT NULL,
      trigger_name VARCHAR(200) NOT NULL,
      trigger_group VARCHAR(200) NOT NULL,
      blob_data BYTEA NULL,
      CONSTRAINT pk_qrtz_blob_triggers PRIMARY KEY (sched_name, trigger_name, trigger_group),
      CONSTRAINT fk_qrtz_blob_triggers_qrtz_triggers FOREIGN KEY (sched_name, trigger_name, trigger_group)
        REFERENCES qrtz_triggers(sched_name, trigger_name, trigger_group)
        ON DELETE CASCADE
    );

    CREATE TABLE IF NOT EXISTS qrtz_calendars
    (
      sched_name VARCHAR(120) NOT NULL,
      calendar_name  VARCHAR(200) NOT NULL,
      calendar BYTEA NOT NULL,
      CONSTRAINT pk_qrtz_calendars PRIMARY KEY (sched_name, calendar_name)
    );

    CREATE TABLE IF NOT EXISTS qrtz_paused_trigger_grps
    (
      sched_name VARCHAR(120) NOT NULL,
      trigger_group  VARCHAR(200) NOT NULL,
      CONSTRAINT pk_qrtz_paused_trigger_grps PRIMARY KEY (sched_name, trigger_group)
    );

    CREATE TABLE IF NOT EXISTS qrtz_fired_triggers
    (
      sched_name VARCHAR(120) NOT NULL,
      entry_id VARCHAR(95) NOT NULL,
      trigger_name VARCHAR(200) NOT NULL,
      trigger_group VARCHAR(200) NOT NULL,
      instance_name VARCHAR(200) NOT NULL,
      fired_time BIGINT NOT NULL,
      sched_time BIGINT NOT NULL,
      priority INTEGER NOT NULL,
      state VARCHAR(16) NOT NULL,
      job_name VARCHAR(200) NULL,
      job_group VARCHAR(200) NULL,
      is_nonconcurrent BOOL NULL,
      requests_recovery BOOL NULL,
      CONSTRAINT pk_qrtz_fired_triggers PRIMARY KEY (sched_name, entry_id)
    );

    CREATE TABLE IF NOT EXISTS qrtz_scheduler_state
    (
      sched_name VARCHAR(120) NOT NULL,
      instance_name VARCHAR(200) NOT NULL,
      last_checkin_time BIGINT NOT NULL,
      checkin_interval BIGINT NOT NULL,
      CONSTRAINT pk_qrtz_scheduler_state PRIMARY KEY (sched_name, instance_name)
    );

    CREATE TABLE IF NOT EXISTS qrtz_locks
    (
      sched_name VARCHAR(120) NOT NULL,
      lock_name  VARCHAR(40) NOT NULL,
      CONSTRAINT pk_qrtz_locks PRIMARY KEY (sched_name, lock_name)
    );

    CREATE INDEX IF NOT EXISTS idx_qrtz_j_req_recovery ON qrtz_job_details(sched_name, requests_recovery);
    CREATE INDEX IF NOT EXISTS idx_qrtz_j_grp ON qrtz_job_details(sched_name, job_group);

    CREATE INDEX IF NOT EXISTS idx_qrtz_t_j ON qrtz_triggers(sched_name, job_name, job_group);
    CREATE INDEX IF NOT EXISTS idx_qrtz_t_jg ON qrtz_triggers(sched_name, job_group);
    CREATE INDEX IF NOT EXISTS idx_qrtz_t_c ON qrtz_triggers(sched_name, calendar_name);
    CREATE INDEX IF NOT EXISTS idx_qrtz_t_g ON qrtz_triggers(sched_name, trigger_group);
    CREATE INDEX IF NOT EXISTS idx_qrtz_t_state ON qrtz_triggers(sched_name, trigger_state);
    CREATE INDEX IF NOT EXISTS idx_qrtz_t_n_state ON qrtz_triggers(sched_name, trigger_name, trigger_group, trigger_state);
    CREATE INDEX IF NOT EXISTS idx_qrtz_t_n_g_state ON qrtz_triggers(sched_name, trigger_group, trigger_state);
    CREATE INDEX IF NOT EXISTS idx_qrtz_t_next_fire_time ON qrtz_triggers(sched_name, next_fire_time);
    CREATE INDEX IF NOT EXISTS idx_qrtz_t_nft_st ON qrtz_triggers(sched_name, trigger_state, next_fire_time);
    CREATE INDEX IF NOT EXISTS idx_qrtz_t_nft_misfire ON qrtz_triggers(sched_name, misfire_instr, next_fire_time);
    CREATE INDEX IF NOT EXISTS idx_qrtz_t_nft_st_misfire ON qrtz_triggers(sched_name, misfire_instr, next_fire_time, trigger_state);
    CREATE INDEX IF NOT EXISTS idx_qrtz_t_nft_st_misfire_grp ON qrtz_triggers(sched_name, misfire_instr, next_fire_time, trigger_group, trigger_state);

    CREATE INDEX IF NOT EXISTS idx_qrtz_ft_trig_inst_name ON qrtz_fired_triggers(sched_name, instance_name);
    CREATE INDEX IF NOT EXISTS idx_qrtz_ft_inst_job_req_rcvry ON qrtz_fired_triggers(sched_name, instance_name, requests_recovery);
    CREATE INDEX IF NOT EXISTS idx_qrtz_ft_j_g ON qrtz_fired_triggers(sched_name, job_name, job_group);
    CREATE INDEX IF NOT EXISTS idx_qrtz_ft_jg ON qrtz_fired_triggers(sched_name, job_group);
    CREATE INDEX IF NOT EXISTS idx_qrtz_ft_t_g ON qrtz_fired_triggers(sched_name, trigger_name, trigger_group);
    CREATE INDEX IF NOT EXISTS idx_qrtz_ft_tg ON qrtz_fired_triggers(sched_name, trigger_group);
  </insert>

  <resultMap id="quartzTaskResultMap" type="org.sonatype.nexus.quartz.internal.datastore.QuartzTaskStateData">
    <result property="jobName" column="job_name"/>
    <result property="jobData" column="job_data" />
    <result property="state" column="state"/>
  </resultMap>
  
  <sql id="selectState">
       SELECT D.job_name,
              D.job_data,
              F.state
         FROM qrtz_job_details D
    LEFT JOIN qrtz_fired_triggers F
           ON D.job_name = F.job_name
  </sql>

  <select id="getStates" resultMap="quartzTaskResultMap">
    <include refid="selectState"/>;
  </select>

  <select id="getState" resultMap="quartzTaskResultMap">
    <include refid="selectState"/>
    WHERE D.job_name = #{value};
  </select>

  <update id="updateJobDataMap" parameterType="QuartzTaskStateData">
    UPDATE qrtz_job_details SET job_data = #{jobData} WHERE job_name = #{jobName};
  </update>

</mapper>
